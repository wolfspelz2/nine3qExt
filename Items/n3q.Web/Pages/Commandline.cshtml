@page
@model n3q.Web.CommandlineModel
@{
    ViewData["Title"] = "Commandline";
}

<h1>@ViewData["Title"]</h1>

<div class="cCommandline">
    <div id="iMenu">
        @{
            var commandList = new Dictionary<string, Dictionary<string, CommandDetail>>();
            @foreach (var pair in Model.Commands) {
                var group = "General";
                var cmd = pair.Key;
                var parts = pair.Key.Split(new[] { '_', '.' }, 2, StringSplitOptions.RemoveEmptyEntries);
                if (parts.Length == 2) {
                    group = parts[0];
                    if (group == "Dev") { group = "General"; }
                    cmd = parts[1];
                }
                if (!commandList.ContainsKey(group)) { commandList[group] = new Dictionary<string, CommandDetail>(); }
                commandList[group].Add(cmd, pair.Value);
            }
        }
        @foreach (var pair in commandList) {
            var group = pair.Key;
            <div class="cCommandGroup">
                <span class="cGroupTitle">@group</span>
                @foreach (var pair2 in pair.Value) {
                    var detail = pair2.Value;
                    var cmd = pair2.Key;
                    <div class="cCommandItem">
                        <a href="#" class="cTextButton cLabel" data-cmd="@Convert.ToBase64String(System.Text.ASCIIEncoding.ASCII.GetBytes(@detail.Template))" title="@detail.Arguments">@cmd</a>
                        <a href="#" class="cTextButton cInsert" data-cmd="@Convert.ToBase64String(System.Text.ASCIIEncoding.ASCII.GetBytes(@detail.Template))" title="Insert command">@Html.Raw(@Model.Symbols.Insert)</a>
                        @if (detail.ImmediateExecute) {
                            <a href="#" class="cTextButton cExecute" data-cmd="@Convert.ToBase64String(System.Text.ASCIIEncoding.ASCII.GetBytes(@detail.Template))" title="Execute command">@Html.Raw(@Model.Symbols.Execute)</a>
                        }
                    </div>
                }
            </div>
        }

        <div id="iFavorites" class="cCommandGroup">
        </div>

    </div>
</div>

<div id="iIn">
    @Html.TextArea("cmdline", "", new { id = "iCommandline", rows = "4", cols = "120" })
    <form id="iForm" method="post">
        <div>
            <input type="hidden" id="arg" name="arg" value="" />
        </div>
        <div>
            <input type="submit" id="iSubmit" value="Enter" />
            <input type="button" id="iClearInput" value="Clear input" />
            <input type="button" id="iClearOutput" value="Clear output" />
        </div>
    </form>
</div>

<div>
    <div id="iOut">
    </div>
</div>

@section Scripts {
    <script type="text/JavaScript">

        var g_nCnt = 0;

        function SetInput(text) {
            $('#iCommandline').val(text);
        }

        function GetInput() {
            return $('#iCommandline').val();
        }

        function FocusInput() {
            $('#iCommandline')[0].focus();
        }

        function ClearInput() {
            $('#iCommandline').val('');
        }

        function ClearOutput() {
            $('#iOut').empty();
        }

        function AddOutput(cmd, text) {
            g_nCnt++;
            var sId = 'iTransaction' + g_nCnt;
            var js = ''
                + '<div id="' + sId + '" class="cTransaction" style="display: none;">'
                + '  <div class="cOriginalCommand">'
                + '  <span class="cButtons">'
                + '    <a href="#" class="cTextButton cDelete" data-transaction="' + sId + '" title="Delete">@Html.Raw(@Model.Symbols.Delete)</a>'
                + '    <a href="#" class="cTextButton cInsert" data-cmd="' + btoa(cmd) + '" title="Insert command">@Html.Raw(@Model.Symbols.Insert)</a>'
                + '    <a href="#" class="cTextButton cExecute" data-cmd="' + btoa(cmd) + '" title="Execute command">@Html.Raw(@Model.Symbols.Execute)</a>'
                + '    <a href="#" class="cTextButton cSave" data-cmd="' + btoa(cmd) + '" title="Save favorite">@Html.Raw(@Model.Symbols.Save)</a>'
                + '  </span>'
                + '  <span class="cCommand">'
                + cmd
                + '  </span>'
                + '  </div>'
                + '  <div class="cResult">'
                + text
                + '  </div>'
                + '</div>';

            $('#iOut').prepend(js);

            $('#' + sId).slideToggle(100);

            $('#' + sId + ' .cDelete').on('click', function (evt) {
                DeleteTransaction($(evt.target).data('transaction'));
                return false;
            });

            $('#' + sId + ' .cSave').on('click', function (evt) {
                SaveFavorite(atob($(evt.target).data('cmd')));
                FocusInput();
                return false;
            });

            $('#' + sId + ' .cInsert').on('click', function (evt) {
                SetInput(atob($(evt.target).data('cmd')));
                FocusInput();
                return false;
            });

            $('#' + sId + ' .cExecute').on('click', function (evt) {
                Run(atob($(evt.target).data('cmd')));
                FocusInput();
                return false;
            });
        }

        function DeleteTransaction(id) {
            $('#' + id).remove();
        }

        function SetFavorites(text) {
            $('#iFavorites .cFavorites').remove();
            $('#iFavorites').html(text);

            $('#iFavorites .cDelete').on('click', function (evt) {
                DeleteFavorite($(evt.target).data('key'));
                FocusInput();
                return false;
            });

            $('#iFavorites .cTop').on('click', function (evt) {
                UpFavorite($(evt.target).data('key'));
                FocusInput();
                return false;
            });

            $('#iFavorites .cInsert').on('click', function (evt) {
                SetInput(atob($(evt.target).data('cmd')));
                FocusInput();
                return false;
            });

            $('#iFavorites .cExecute').on('click', function (evt) {
                Run(atob($(evt.target).data('cmd')));
                return false;
            });
        }

        // Ajax

        function Run(cmd) {
            PostForm('Run', cmd, function (html) {
                AddOutput(cmd, html);
                ClearInput();
                FocusInput();
            });
        }

        function SaveFavorite(cmd) {
            PostForm('SaveFavorite', cmd, function (html) {
                SetFavorites(html);
                FocusInput();
            });
        }

        function DeleteFavorite(key) {
            PostForm('DeleteFavorite', key, function (html) {
                SetFavorites(html);
                FocusInput();
            });
        }

        function UpFavorite(key) {
            PostForm('UpFavorite', key, function (html) {
                SetFavorites(html);
                FocusInput();
            });
        }

        function PostForm(handler, arg, callback) {
            $('#arg').val(arg);

            let postData = $('#iForm').serialize();

            $.ajax({
                async: true,
                type: 'POST',
                url: '/Commandline?handler=' + handler,
                data: postData
            }).done(function (text) {
                callback(text);
            });
        }

        // wire up

        $(function () {
            $('#iSubmit').on('click', function (evt) {
                Run(GetInput());
                return false;
            });
        });

        $(function () {
            $('#iCommandline').on('keydown', function (evt) {
                if (evt.which == 13 && evt.ctrlKey) {
                    Run(GetInput());
                    return false;
                }
            });
        });

        $(function () {
            $('#iClearInput').on('click', function (evt) {
                ClearInput();
                FocusInput();
                return false;
            });
        });

        $(function () {
            $('#iClearOutput').on('click', function (evt) {
                ClearOutput();
                FocusInput();
                return false;
            });
        });

        $(function () {
            $('.cCommandItem .cLabel').on('click', function (evt) {
                SetInput(atob($(evt.target).data('cmd')));
                FocusInput();
                return false;
            });
        });

        $(function () {
            $('.cInsert').on('click', function (evt) {
                SetInput(atob($(evt.target).data('cmd')));
                FocusInput();
                return false;
            });
        });

        $(function () {
            $('.cExecute').on('click', function (evt) {
                Run(atob($(evt.target).data('cmd')));
                return false;
            });
        });

        DeleteFavorite('not existing dummy to trigger fetch');

    </script>
}
